<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ShlomiBo.Expressed</name>
    </assembly>
    <members>
        <member name="T:ShlomiBo.Expressed.ExpressionExtensions">
            <summary>
            Provides Expression extensions
            </summary>
        </member>
        <member name="M:ShlomiBo.Expressed.ExpressionExtensions.CombineBodyWith``3(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
            <summary>
            Combines the body from an expression, into a second expression, having access to the input
            </summary>
            <typeparam name="TInput">Type of expression input</typeparam>
            <typeparam name="TMiddle">Result type of this expression</typeparam>
            <typeparam name="TOutput">Result type of result expression</typeparam>
            <param name="first">This expression arg</param>
            <param name="second">Seconds expression arg</param>
            <returns>
            An expression from that gets TInput, and returns the seconds expression result,
            by inlining the first expression and the input into the second expression
            </returns>
        </member>
        <member name="M:ShlomiBo.Expressed.ExpressionExtensions.Pipe``3(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
            <summary>
            Creates an expression from the input of this expression, to the output of the other expression,
            by inlining the body of the first expression into the second
            </summary>
            <seealso cref="M:ShlomiBo.Expressed.ExpressionExtensions.PrependTo``3(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})"/>
            <typeparam name="TInput">The input type</typeparam>
            <typeparam name="TMiddle">The output of the first expression, and input of the second</typeparam>
            <typeparam name="TOutput">The output of the seconds expression</typeparam>
            <param name="first">This expression</param>
            <param name="second">The expression to pipe the output to</param>
            <returns>An expression from the input of this expression, to the output of the other expression</returns>
        </member>
        <member name="M:ShlomiBo.Expressed.ExpressionExtensions.PrependTo``3(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
            <summary>
            Creates an expression from the input of this expression, to the output of the other expression,
            by inlining the body of the first expression into the second
            </summary>
            <seealso cref="M:ShlomiBo.Expressed.ExpressionExtensions.Pipe``3(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})"/>
            <typeparam name="TInput">The input type</typeparam>
            <typeparam name="TMiddle">The output of the first expression, and input of the second</typeparam>
            <typeparam name="TOutput">The output of the seconds expression</typeparam>
            <param name="first">This expression</param>
            <param name="second">The expression to pipe the output to</param>
            <returns>An expression from the input of this expression, to the output of the other expression</returns>
        </member>
        <member name="M:ShlomiBo.Expressed.ExpressionExtensions.Compose``3(System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Creates an expression from the input of the other expression, to the output of this expression,
            by inlining the body of the first expression into the second
            </summary>
            <seealso cref="M:ShlomiBo.Expressed.ExpressionExtensions.AppendTo``3(System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1}})"/>
            <typeparam name="TInput">The input type</typeparam>
            <typeparam name="TMiddle">The output of the first expression, and input of the second</typeparam>
            <typeparam name="TOutput">The output of the seconds expression</typeparam>
            <param name="first">This expression</param>
            <param name="second">The expression to compose with this expression</param>
            <returns>An expression from the input of the other expression, to the output of this expression</returns>
        </member>
        <member name="M:ShlomiBo.Expressed.ExpressionExtensions.AppendTo``3(System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Creates an expression from the input of the other expression, to the output of this expression,
            by inlining the body of the first expression into the second
            </summary>
            <seealso cref="M:ShlomiBo.Expressed.ExpressionExtensions.Compose``3(System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1}})"/>
            <typeparam name="TInput">The input type</typeparam>
            <typeparam name="TMiddle">The output of the first expression, and input of the second</typeparam>
            <typeparam name="TOutput">The output of the seconds expression</typeparam>
            <param name="first">This expression</param>
            <param name="second">The expression to compose with this expression</param>
            <returns>An expression from the input of the other expression, to the output of this expression</returns>
        </member>
        <member name="M:ShlomiBo.Expressed.ExpressionExtensions.ReplaceSubExpression(System.Linq.Expressions.Expression,System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <summary>
            Copies this expression, running a function against each sub-expression, and replaces it
            whenever that function returns none-null expression
            </summary>
            <param name="expression">The expression to copy and replace its side expressions</param>
            <param name="replacementSelector">
            A function that returns new expression to replace. If that function returns an expression,
            it is the subexpression in the result expression;
            otherwise, it that function returns null, then the result subexpression is the
            subExpression.ReplaceSubExression(replacementSelector) (i.e. recursivly copy-repalcing the subexpression)
            </param>
            <returns>
            A copy of this expression, having each sub-expression that 'replacementSelector' returned
            non-null for it replaced with the result returned from 'replacementSelector'
            </returns>
        </member>
        <member name="M:ShlomiBo.Expressed.ExpressionExtensions.ReplaceSubExpression(System.Linq.Expressions.Expression,System.Collections.Generic.IDictionary{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <summary>
            Replaces each occurance of key expression with its value expression, in this expression
            </summary>
            <param name="expression">This expression</param>
            <param name="replacements">A dictionary of expressions, paired with their replacements</param>
            <returns>
            A copy of this expression, having each occurance of a key from 'replacements' dictionary
            replaced with its associated value
            </returns>
        </member>
        <member name="M:ShlomiBo.Expressed.ExpressionExtensions.ReplaceSubExpression(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Replaces each occurance of 'leafToReplace' in this 'expression' with 'replacement'
            </summary>
            <param name="expression">This expression</param>
            <param name="leafToReplace">An expression to replace with 'replacement'</param>
            <param name="replacement">
            The expression that replaces 'leafToReplace' in the result expression
            </param>
            <returns>A copy of this expression, where each intance of 'leafToReplace' is repalced with 'replacement'</returns>
            
        </member>
        <member name="M:ShlomiBo.Expressed.ExpressionExtensions.Traverse(System.Linq.Expressions.Expression,System.Func{System.Linq.Expressions.Expression,ShlomiBo.Expressed.ExpressionExtensions.ExpressionTraversal})">
            <summary>
            Traverse an expression tree, allowing generation of new expressions from it
            </summary>
            <param name="expression">The expression to traverse</param>
            <param name="traversal">A function that run against each sub-expression</param>
            <returns>
            Traversal result that determines the result of the traversal,
            if subexpressions should be traversed as well, and if traversal should continue
            </returns>
        </member>
        <member name="T:ShlomiBo.Expressed.ExpressionExtensions.TraversalResult">
            <summary>
            A type represnts the result of subexression traversal
            </summary>
        </member>
        <member name="P:ShlomiBo.Expressed.ExpressionExtensions.TraversalResult.Result">
            <summary>
            Gets the result subexpression
            </summary>
        </member>
        <member name="P:ShlomiBo.Expressed.ExpressionExtensions.TraversalResult.TraversedWholeExpression">
            <summary>
            Gets a value that indicates if all of the input expression was traversed
            </summary>
        </member>
        <member name="M:ShlomiBo.Expressed.ExpressionExtensions.TraversalResult.#ctor(System.Linq.Expressions.Expression,System.Boolean)">
            <summary>
            Creates new intance
            </summary>
            <param name="result">The result subexpression</param>
            <param name="traversedWholeExpression">
            A value that indicates if all of the input expression was traversed
            </param>
        </member>
        <member name="M:ShlomiBo.Expressed.ExpressionExtensions.TraversalResult.op_Implicit(System.Linq.Expressions.Expression)~ShlomiBo.Expressed.ExpressionExtensions.TraversalResult">
            <summary>
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:ShlomiBo.Expressed.ExpressionExtensions.TraversalResult.Deconstruct(System.Linq.Expressions.Expression@,System.Boolean@)">
            <summary>
            </summary>
            <param name="expression"></param>
            <param name="traversedWholeExpression"></param>
        </member>
        <member name="T:ShlomiBo.Expressed.ExpressionExtensions.ExpressionTraversal">
            <summary>
            
            </summary>
        </member>
        <member name="P:ShlomiBo.Expressed.ExpressionExtensions.ExpressionTraversal.Default">
            <summary>
            Gets the default traversal which is - keep the input expression,
            but traverse its subexpressions
            </summary>
        </member>
        <member name="P:ShlomiBo.Expressed.ExpressionExtensions.ExpressionTraversal.Break">
            <summary>
            Gets a value indicates if traversal should continue
            </summary>
        </member>
        <member name="P:ShlomiBo.Expressed.ExpressionExtensions.ExpressionTraversal.NewExpression">
            <summary>
            Gets the result expression for the traversal, or null, to keep the input expression
            </summary>
        </member>
        <member name="P:ShlomiBo.Expressed.ExpressionExtensions.ExpressionTraversal.TraverseSubTree">
            <summary>
            A value indicates if traversal of current expression should continue to its subexpressions
            or siblings
            </summary>
        </member>
    </members>
</doc>
